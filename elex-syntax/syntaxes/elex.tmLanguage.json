{"name":"Elex","scopeName":"source.elex","patterns":[{"name":"comment.line.double-slash.elex","match":"//.*$"},{"name":"comment.block.elex","begin":"/\\*","end":"\\*/"},{"name":"keyword.control.elex","match":"\\b(break|case|catch|class|const|continue|debugger|default|delete|do|else|export|extends|finally|for|function|if|import|in|instanceof|let|new|null|return|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b"},{"name":"string.quoted.double.elex","begin":"\"","end":"\"","patterns":[{"name":"constant.character.escape.elex","match":"\\\\."}]},{"name":"string.quoted.single.elex","begin":"'","end":"'","patterns":[{"name":"constant.character.escape.elex","match":"\\\\."}]},{"name":"string.quoted.backtick.elex","begin":"`","end":"`","patterns":[{"name":"constant.character.escape.elex","match":"\\\\."},{"name":"meta.embedded.expression.elex","begin":"\\$\\{","end":"\\}","patterns":[{"include":"$self"}]}]},{"name":"constant.numeric.elex","match":"\\b(0[xX][0-9a-fA-F]+|0[oO][0-7]+|0[bB][01]+|\\d*\\.?\\d+([eE][+-]?\\d+)?)\\b"},{"name":"constant.language.elex","match":"\\b(true|false|null)\\b"},{"name":"string.regexp.elex","begin":"/(?![\\s\\*])","end":"/[gimyu]*","patterns":[{"name":"constant.character.escape.elex","match":"\\\\."}]},{"name":"entity.name.function.elex","match":"\\bfunction\\s+(\\w+)\\s*\\(","captures":{"1":{"name":"support.function.elex"}}}]}